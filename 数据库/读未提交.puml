@startuml common
note as A
读未提交-演示样例
|=名称|=数据类型|=默认|=注释|
| id | BIGINT(20) | AUTO_INCREMENT | 主键索引 |
| name | VARCHAR(50)  |  | 名称 |
| score | INT(128)  |  | 分数 |
| course_id | TINYINT(4)  |  | 科目,普通索引 |
| last_update_time | TIMESTAMP | CURRENT_TIMESTAMP \n ON UPDATE CURRENT_TIMESTAMP | 最后更新时间 |
end note
@enduml

@startuml READ-UNCOMMITTED

title : READ UNCOMMITTED

box #LightBlue
participant 事务A as A
database 数据库 as DB
participant 事务B as B
end box
collections 其他业务 as O
actor 用户 as U

note over of DB : 准备工作:\n-- 设置锁超时时长\nSET innodb_lock_wait_timeout = 100;\nSHOW VARIABLES LIKE 'innodb_lock_wait_timeout';\n-- 修改隔离级别-读未提交\nSET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED\nSELECT @@TX_ISOLATION;
note over of DB : 模拟的场景:\n事务A对分数进行修改, 事务B内读取到分数, \n并把分数提交给其他业务, 然后B结束了事务, \n接着事务A发现分数改错了, 马上进行了回滚, 但是分数已经被B提交给其他业务了, 导致其他业务数据错乱.
A -> DB : 准备工作 
B -> DB : 准备工作
== 脏读 ==
A -> DB : BEGIN 
activate A
B -> DB : BEGIN 
activate B
A -> DB : SELECT score FROM t_student_score WHERE id = 1;
DB --> A : 返回分数 : 1
A -> DB : UPDATE t_student_score SET score = score + 10 WHERE id = 1;
DB --> A : 修改成功

B -> DB : SELECT score FROM t_student_score WHERE id = 1;
DB -[#blue]-> B : 返回分数 : 11
B -[#blue]> O : 把分数(11) 提交给其他业务
B -> DB : COMMIT
deactivate B
A -> DB : ROLLBACK
deactivate A
......
......
...After a long time...
......
......
U -> DB : 从数据库看看成绩
U <-- DB : 返回分数(1)
U -> O : 从其他业务看看成绩
U <-[#blue]- O : 返回分数(11)
U -> U : 两个地方的分数不一致啊?

@enduml